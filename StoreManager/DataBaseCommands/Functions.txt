create or replace FUNCTION CheckUserEmailExistence(
    p_Email VARCHAR2
) RETURN BOOLEAN IS
    v_UserCount NUMBER;
BEGIN
    -- Перевіряємо, чи існує користувач з введеним ім'ям, номером телефона или адресом електронної пошти
    SELECT COUNT(*)
    INTO v_UserCount
    FROM Users
    WHERE Email = p_Email;

    -- Якщо кількість користувачів більше 0, то користувач існує
    RETURN v_UserCount > 0;
END;

create or replace FUNCTION CheckUserNameExistence(
    p_UserName VARCHAR2
) RETURN BOOLEAN IS
    v_UserCount NUMBER;
BEGIN
    -- Перевіряємо, чи існує користувач з введеним ім'ям, номером телефона или адресом електронної пошти
    SELECT COUNT(*)
    INTO v_UserCount
    FROM Users
    WHERE UserName = p_UserName;

    -- Якщо кількість користувачів більше 0, то користувач існує
    RETURN v_UserCount > 0;
END;


create or replace FUNCTION CheckUserPhoneNumberExistence(
    p_PhoneNumber VARCHAR2
) RETURN BOOLEAN IS
    v_UserCount NUMBER;
BEGIN
    -- Перевіряємо, чи існує користувач з введеним ім'ям, номером телефона или адресом електронної пошти
    SELECT COUNT(*)
    INTO v_UserCount
    FROM Users
    WHERE PhoneNumber = p_PhoneNumber;

    -- Якщо кількість користувачів більше 0, то користувач існує
    RETURN v_UserCount > 0;
END;

create or replace FUNCTION DeleteProduct(
    p_ProductID NUMBER
) RETURN BOOLEAN
IS
    v_InventoryCount NUMBER;
    v_OrderItemsCount NUMBER;
BEGIN
    -- Проверка наличия записей в таблице Inventory
    SELECT COUNT(*) INTO v_InventoryCount
    FROM Inventory
    WHERE ProductID = p_ProductID;

    -- Проверка наличия записей в таблице OrderItems
    SELECT COUNT(*) INTO v_OrderItemsCount
    FROM OrderItems
    WHERE ProductID = p_ProductID;

    -- Если нет записей в Inventory и OrderItems, удаляем из Products
    IF v_InventoryCount = 0 AND v_OrderItemsCount = 0 THEN
        DELETE FROM Products
        WHERE ProductID = p_ProductID;
        COMMIT;
        RETURN TRUE;
    ELSE
        -- В противном случае возвращаем FALSE
        RETURN FALSE;
    END IF;
END DeleteProduct;


create or replace FUNCTION GetNextBackCardID RETURN NUMBER IS
    v_BankCardID NUMBER;
BEGIN
    SELECT BankCardSeq.NEXTVAL INTO v_BankCardID FROM DUAL;
    RETURN v_BankCardID;
END GetNextBackCardID;

create or replace FUNCTION GetNextCashID RETURN NUMBER IS
    v_CashID NUMBER;
BEGIN
    SELECT CashSeq.NEXTVAL INTO v_CashID FROM DUAL;
    RETURN v_CashID;
END GetNextCashID;

create or replace FUNCTION GetPasswordHash(
    p_UserID NUMBER
) RETURN VARCHAR2
AS
    v_PasswordHash VARCHAR2(64);
BEGIN
    SELECT PasswordHash INTO v_PasswordHash
    FROM Users
    WHERE UserID = p_UserID;

    RETURN v_PasswordHash;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END GetPasswordHash;


create or replace FUNCTION GetProductData
RETURN SYS_REFCURSOR
IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
        SELECT
            P.ProductID,
            P.SKU,
            P.ProductName,
            P.Cost,
            P.SalesCount,
            C.CategoryID,
            C.CategoryName,
            C.CategoryDescription,
            C.ParentCategoryID,
            D.DescriptionID,
            D.FileName AS DescriptionFileName,
            D.FileType AS DescriptionFileType,
            D.FileExtension AS DescriptionFileExtension,
            D.FileData,
            D.UploadDate AS DescriptionUploadDate,
            D.ModificationDate AS DescriptionModificationDate,
            D.Info,
            BC.ContentID,
            BC.FileName AS BinaryContentFileName,
            BC.FileType AS BinaryContentFileType,
            BC.FileExtension AS BinaryContentFileExtension,
            BC.UploadDate AS BinaryContentUploadDate,
            BC.ModificationDate AS BinaryContentModificationDate,
            BC.ModificationDate,
            BC.Content
        FROM
            Products P
        LEFT JOIN
            Categories C ON P.CategoryID = C.CategoryID
        LEFT JOIN
            Descriptions D ON P.DescriptionID = D.DescriptionID
        LEFT JOIN
            BinaryContent BC ON P.ContentID = BC.ContentID;

    RETURN v_cursor;
END GetProductData;


create or replace FUNCTION GetUniqueRandomOrderNumber RETURN NUMBER IS
    v_RandomNumber NUMBER;
    v_Count NUMBER;
BEGIN
    LOOP
        v_RandomNumber := TRUNC(DBMS_RANDOM.VALUE * 1000000);

        SELECT COUNT(*)
        INTO v_Count
        FROM ORDERITEMS
        WHERE ORDERNUMBER = v_RandomNumber;
        EXIT WHEN v_Count = 0;
    END LOOP;
    RETURN v_RandomNumber;
END;

create or replace FUNCTION GetUserRole(p_UserName VARCHAR2) RETURN VARCHAR2 IS
    v_UserRole VARCHAR2(50);
BEGIN
    SELECT UserRole INTO v_UserRole
    FROM Users
    WHERE UserName = p_UserName;

    RETURN v_UserRole;
END GetUserRole;


create or replace FUNCTION HasShipment (p_OrderID NUMBER)
RETURN NUMBER
IS
  v_ShipmentID NUMBER;
BEGIN
  SELECT ShipmentID INTO v_ShipmentID
  FROM Shipments
  WHERE OrderID = p_OrderID;
  RETURN v_ShipmentID;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END;