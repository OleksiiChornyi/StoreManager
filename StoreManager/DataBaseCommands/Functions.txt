--Функція для отримання ролі користувача
CREATE OR REPLACE FUNCTION GetUserRole(p_UserName VARCHAR2) RETURN VARCHAR2 IS
    v_UserRole VARCHAR2(50);
BEGIN
    -- Ищем UserRole по заданному UserName
    SELECT UserRole INTO v_UserRole
    FROM Users
    WHERE UserName = p_UserName;

    -- Если найдено, возвращаем UserRole
    RETURN v_UserRole;
END GetUserRole;
/

--Функція отримання UserId по UserName
CREATE OR REPLACE FUNCTION GetUserIDByUsername(
    p_UserName VARCHAR2
) RETURN NUMBER
AS
    v_UserID NUMBER;
BEGIN
    -- Шукаємо UserID за вказаним UserName
    SELECT UserID INTO v_UserID
    FROM Users
    WHERE UserName = p_UserName;

    -- Якщо знайдено, повертаємо UserID
    RETURN v_UserID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN OTHERS THEN
        RETURN NULL;
END GetUserIDByUsername;
/


CREATE OR REPLACE FUNCTION CheckUserExistence(
    p_UserName VARCHAR2,
    p_PhoneNumber VARCHAR2,
    p_Email VARCHAR2
) RETURN BOOLEAN IS
    v_UserCount NUMBER;
BEGIN
    -- Перевіряємо, чи існує користувач з введеним ім'ям, номером телефона или адресом електронної пошти
    SELECT COUNT(*)
    INTO v_UserCount
    FROM Users
    WHERE UserName = p_UserName
       OR PhoneNumber = p_PhoneNumber
       OR Email = p_Email;

    -- Якщо кількість користувачів більше 0, то користувач існує
    RETURN v_UserCount > 0;
END;
/

CREATE OR REPLACE FUNCTION CheckUserNameExistence(
    p_UserName VARCHAR2
) RETURN BOOLEAN IS
    v_UserCount NUMBER;
BEGIN
    -- Перевіряємо, чи існує користувач з введеним ім'ям, номером телефона или адресом електронної пошти
    SELECT COUNT(*)
    INTO v_UserCount
    FROM Users
    WHERE UserName = p_UserName;

    -- Якщо кількість користувачів більше 0, то користувач існує
    RETURN v_UserCount > 0;
END;
/


--Функція для перевірки чи існує відвантаження для замовлення
-- Створюємо функцію HasShipment
CREATE OR REPLACE FUNCTION HasShipment (p_OrderID NUMBER)
RETURN NUMBER -- Змінюємо тип повернення на NUMBER
IS
  v_ShipmentID NUMBER; -- Змінна для зберігання ShipmentID
BEGIN
  -- Перевіряємо, чи існує відвантаження для даного замовлення
  SELECT ShipmentID INTO v_ShipmentID -- Змінюємо колонку на ShipmentID
  FROM Shipments
  WHERE OrderID = p_OrderID;
  -- Повертаємо ShipmentID
  RETURN v_ShipmentID;
EXCEPTION
  WHEN NO_DATA_FOUND THEN -- Якщо відвантаження не існує
    RETURN NULL; -- Повертаємо NULL
END;


-- Функція створення нового номеру замовлення
CREATE OR REPLACE FUNCTION GetUniqueRandomOrderNumber RETURN NUMBER IS
    v_RandomNumber NUMBER;
    v_Count NUMBER;
BEGIN
    LOOP
        -- Генеруємо випадкове число
        v_RandomNumber := TRUNC(DBMS_RANDOM.VALUE * 1000000);

        -- Перевіряємо, чи таке число вже існує в таблиці або інших місцях
        SELECT COUNT(*)
        INTO v_Count
        FROM ORDERITEMS -- Замініть "YourTable" на назву вашої таблиці тут
        WHERE ORDERNUMBER = v_RandomNumber; -- Замініть "YourColumn" на назву стовпця, де зберігається випадкове число

        -- Якщо такого числа не знайдено, виходимо з циклу
        EXIT WHEN v_Count = 0;
    END LOOP;

    -- Повертаємо унікальне випадкове число
    RETURN v_RandomNumber;
END;
/

--Функція для відтворення DescriptionData
CREATE OR REPLACE FUNCTION GetDescritpionDataByID(p_DescriptionID NUMBER)
RETURN BLOB
AS
    v_FileData BLOB;
BEGIN
    SELECT FileData
    INTO v_FileData
    FROM Descriptions
    WHERE DescriptionID = p_DescriptionID;

    RETURN v_FileData;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END GetDescritpionDataByID;
/

--Функція для відтворення ProductImage
CREATE OR REPLACE FUNCTION GetProductImageByID(p_ProductID NUMBER)
RETURN BLOB
AS
    v_ProductImage BLOB;
BEGIN
    SELECT ProductImage
    INTO v_ProductImage
    FROM Products
    WHERE ProductID = p_ProductID;

    RETURN v_ProductImage;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END GetProductImageByID;
/

--Функція для назви файлу та зображення товару:
create or replace FUNCTION GetProductImage(p_ProductID NUMBER)
RETURN SYS_REFCURSOR
IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
        SELECT
            p.ProductImage,
            p.ProductImageFileName
        FROM
            Products p
        WHERE
            p.ProductID = p_ProductID;

    RETURN v_cursor;
END;
/

--Функція для назви файлу та даних цього файлу:
CREATE OR REPLACE FUNCTION GetDescriptionData(
    p_DescriptionID NUMBER
) RETURN SYS_REFCURSOR
IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
        SELECT
            d.FileData,
            d.FileName
        FROM
            Descriptions d
        WHERE
            d.DescriptionID = p_DescriptionID;

    RETURN v_cursor;
END;
/


--Видалити продукт
CREATE OR REPLACE FUNCTION DeleteProduct(p_productID NUMBER)
RETURN BOOLEAN
IS
  v_success BOOLEAN := FALSE;
BEGIN
  DELETE FROM Products
  WHERE ProductID = p_productID;

  v_success := TRUE;

  RETURN v_success;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;
/

--Отримати наступний айді готівки
CREATE OR REPLACE FUNCTION GetNextCashID RETURN NUMBER IS
    v_CashID NUMBER;
BEGIN
    -- Используем секвенцию для получения нового CashID
    SELECT CashSeq.NEXTVAL INTO v_CashID FROM DUAL;
    RETURN v_CashID;
END GetNextCashID;

--Отримати наступний айді банківскьої карти
CREATE OR REPLACE FUNCTION GetNextBackCardID RETURN NUMBER IS
    v_BankCardID NUMBER;
BEGIN
    -- Используем секвенцию для получения нового BankCardID
    SELECT BankCardSeq.NEXTVAL INTO v_BankCardID FROM DUAL;
    RETURN v_BankCardID;
END GetNextBackCardID;

--Отримати назву опису по айді
create or replace FUNCTION GetDescriptionName(d_descriptionID NUMBER)
RETURN VARCHAR2
IS
  v_descriptionFileName VARCHAR2(50);
BEGIN
  SELECT FileName INTO v_descriptionFileName
  FROM Descriptions
  WHERE DescriptionID = d_descriptionID;

  RETURN v_descriptionFileName;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END;