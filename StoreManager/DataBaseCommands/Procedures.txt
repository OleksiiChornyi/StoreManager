create or replace PROCEDURE AddBankCard(
    p_OrderNumber NUMBER,
    p_CardNumber VARCHAR2,
    p_BankCardID NUMBER
) IS
BEGIN
    -- Додаємо новий запис в таблицю BankCard
    INSERT INTO BankCard (BankCardID, BankNumber, OrderNumber)
    VALUES (p_BankCardID, p_CardNumber, p_OrderNumber);
END;

create or replace PROCEDURE AddCash(
    p_OrderNumber NUMBER,
    p_CashID NUMBER
) IS
BEGIN
    INSERT INTO Cash (CASHID, OrderNumber)
    VALUES (p_CashID, p_OrderNumber);
END;

create or replace PROCEDURE AddCategory(
    p_CategoryName VARCHAR2,
    p_CategoryDescription VARCHAR2,
    p_ParentCategoryID NUMBER
) IS
    v_CategoryID NUMBER;
BEGIN
    -- Використовуємо секвенцію для отримання нового CategoryID
    SELECT CategoriesSeq.NEXTVAL INTO v_CategoryID FROM DUAL;

    -- Додаємо нову категорію в таблицю Categories
    INSERT INTO Categories (CategoryID, CategoryName, CategoryDescription, ParentCategoryID )
    VALUES (v_CategoryID, p_CategoryName, p_CategoryDescription, p_ParentCategoryID);
END;

create or replace PROCEDURE AddDescription(
    p_FileName VARCHAR2,
    p_FileType VARCHAR2,
    p_FileExtension VARCHAR2,
    p_FileData BLOB,
    p_Info VARCHAR2
) IS
    v_DescriptionID NUMBER;
BEGIN
    SELECT DescriptionsSeq.NEXTVAL INTO v_DescriptionID FROM DUAL;

    INSERT INTO Descriptions (DescriptionID, FileName, FileType, FileExtension, FileData, Info)
    VALUES (v_DescriptionID, p_FileName, p_FileType, p_FileExtension, p_FileData, p_Info);
END;

create or replace PROCEDURE AddInventory(
    p_ProductID NUMBER,
    p_QuantityOnHand NUMBER,
    p_WarehouseID NUMBER
) IS
    v_InventoryID NUMBER;
BEGIN
    SELECT InventorySeq.NEXTVAL INTO v_InventoryID FROM DUAL;

    INSERT INTO Inventory (InventoryID, ProductID, QuantityOnHand, WarehouseID, InventoryDate )
    VALUES (v_InventoryID, p_ProductID, p_QuantityOnHand, p_WarehouseID, SYSTIMESTAMP);
END;

create or replace PROCEDURE AddOrder(
    p_OrderNumber NUMBER,
    p_UserID NUMBER
) IS
    v_OrderID NUMBER;
BEGIN
    SELECT OrdersSeq.NEXTVAL INTO v_OrderID FROM DUAL;

    INSERT INTO Orders (OrderID, OrderNumber, OrderDate, OrderStatus, UserID)
    VALUES (v_OrderID, p_OrderNumber, SYSDATE, 'Creating', p_UserID);
END;

create or replace PROCEDURE AddOrderItem(
    p_OrderNumber NUMBER,
    p_ProductID NUMBER,
    p_Quantity NUMBER
) IS
    v_OrderItemID NUMBER;
BEGIN
    SELECT OrderItemsSeq.NEXTVAL INTO v_OrderItemID FROM DUAL;

    INSERT INTO OrderItems (OrderItemID, OrderNumber, ProductID, Quantity)
    VALUES (v_OrderItemID, p_OrderNumber, p_ProductID, p_Quantity);
END;

create or replace PROCEDURE AddPayment(
    p_UserId NUMBER,
    p_OrderNumber NUMBER,
    p_TotalPrice NUMBER,
    p_CashID NUMBER,
    p_BankCardID NUMBER
) IS
    v_PaymentID NUMBER;
BEGIN
    SELECT PaymentSeq.NEXTVAL INTO v_PaymentID FROM DUAL;

    -- Додаємо новий запис в таблицю Payments
    INSERT INTO Payments (PaymentID, UserId, OrderNumber, TotalPrice, CashID, BankCardID)
    VALUES (v_PaymentID, p_UserId, p_OrderNumber, p_TotalPrice, p_CashID, p_BankCardID);
END;

create or replace PROCEDURE AddProduct (
    p_ProductName VARCHAR2,
    p_DescriptionID NUMBER,
    p_ContentID NUMBER,
    p_Cost NUMBER,
    p_CategoryID NUMBER
)
AS
BEGIN
    INSERT INTO Products (ProductID, ProductName, DescriptionID, ContentID, Cost, CategoryID)
    VALUES (
        ProductsSeq.NEXTVAL,
        p_ProductName,
        p_DescriptionID,
        p_ContentID,
        p_Cost,
        p_CategoryID
    );

    COMMIT;
END AddProduct;

create or replace PROCEDURE AddShipment(
    p_ShipmentStatus VARCHAR2,
    p_OrderID NUMBER
) IS
    v_ShipmentID NUMBER;
    v_ShipmentNumber NUMBER;
BEGIN
    SELECT ShipmentsSeq.NEXTVAL INTO v_ShipmentID FROM DUAL;

    SELECT ShipmentsNumberSeq.NEXTVAL INTO v_ShipmentNumber FROM DUAL;

    INSERT INTO Shipments (ShipmentID, ShipmentNumber, ShipmentDate, ShipmentStatus, OrderID)
    VALUES (v_ShipmentID, v_ShipmentNumber, SYSDATE, p_ShipmentStatus, p_OrderID);
END;

create or replace PROCEDURE AddSupplier(
    p_CompanyName VARCHAR2,
    p_ContactInfo VARCHAR2,
    p_SupplierAddress VARCHAR2
) IS
    v_SupplierID NUMBER;
BEGIN
    SELECT SuppliersSeq.NEXTVAL INTO v_SupplierID FROM DUAL;

    INSERT INTO Suppliers (SupplierID, CompanyName, ContactInfo, SupplierAddress)
    VALUES (v_SupplierID, p_CompanyName, p_ContactInfo, p_SupplierAddress);
END;

create or replace PROCEDURE AddTransaction(
    p_UserID NUMBER,
    p_OrderNumber NUMBER,
    p_TransactionType VARCHAR2,
    p_Description VARCHAR2
) IS
    v_TransactionID NUMBER;
    v_Description VARCHAR2(255);
BEGIN
    SELECT TransactionsSeq.NEXTVAL INTO v_TransactionID FROM DUAL;

    v_Description := p_Description;

    INSERT INTO Transactions (TransactionID, UserID, OrderNumber, TransactionDate, TransactionType, Description)
    VALUES (v_TransactionID, p_UserID, p_OrderNumber, SYSTIMESTAMP, p_TransactionType, v_Description);
END;

create or replace PROCEDURE AddWarehouse(
    p_WarehouseName VARCHAR2,
    p_Location VARCHAR2,
    p_Capacity NUMBER,
    p_Availability NUMBER
) IS
    v_WarehouseID NUMBER;
BEGIN
    SELECT WarehousesSeq.NEXTVAL INTO v_WarehouseID FROM DUAL;

    INSERT INTO Warehouses (WarehouseID, WarehouseName, Location, Capacity, Availability )
    VALUES (v_WarehouseID, p_WarehouseName, p_Location, p_Capacity, p_Availability);
END;

create or replace PROCEDURE CreateBinaryContent(
    p_cursor OUT SYS_REFCURSOR,
    p_FileName VARCHAR2,
    p_FileType VARCHAR2,
    p_FileExtension VARCHAR2,
    p_Content BLOB
) IS
    v_ContentID NUMBER;
BEGIN
    SELECT BinaryContentSeq.NEXTVAL INTO v_ContentID FROM DUAL;

    INSERT INTO BinaryContent (ContentID, FileName, FileType, FileExtension, UploadDate, ModificationDate, Content)
    VALUES (v_ContentID, p_FileName, p_FileType, p_FileExtension, SYSTIMESTAMP, SYSTIMESTAMP, p_Content);

    OPEN p_cursor FOR
        SELECT ContentID, FileName, FileType, FileExtension, UploadDate, ModificationDate, Content
        FROM BinaryContent
        WHERE ContentID = v_ContentID;
END;

create or replace PROCEDURE DeleteCategory (
    p_CategoryID NUMBER,
    p_IsDeleted OUT BOOLEAN
)
AS
    v_ParentCategoryExists NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_ParentCategoryExists
    FROM Categories
    WHERE ParentCategoryID = p_CategoryID;

    IF v_ParentCategoryExists > 0 THEN
        p_IsDeleted := FALSE;
    ELSE
        BEGIN
            DELETE FROM Categories
            WHERE CategoryID = p_CategoryID;
            COMMIT;
            p_IsDeleted := TRUE;
        EXCEPTION
            WHEN OTHERS THEN
                p_IsDeleted := FALSE;
        END;
    END IF;
END DeleteCategory;


create or replace PROCEDURE DeleteDescription (
    p_DescriptionID NUMBER,
    p_IsDeleted OUT BOOLEAN
)
AS
    v_DescriptionUsing NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_DescriptionUsing
    FROM Products
    WHERE DescriptionID = p_DescriptionID;

    IF v_DescriptionUsing > 0 THEN
        p_IsDeleted := FALSE;
    ELSE
        BEGIN
            DELETE FROM Descriptions
            WHERE DescriptionID = p_DescriptionID;
            COMMIT;
            p_IsDeleted := TRUE;
        EXCEPTION
            WHEN OTHERS THEN
                p_IsDeleted := FALSE;
        END;
    END IF;
END DeleteDescription;

create or replace PROCEDURE DeleteInventory (
    p_InventoryID NUMBER,
    p_IsDeleted OUT BOOLEAN
)
IS
BEGIN
    BEGIN
        DELETE FROM Inventory
        WHERE InventoryID = p_InventoryID;
        COMMIT;
        p_IsDeleted := TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            p_IsDeleted := FALSE;
    END;
END DeleteInventory;

--Explicit cursos
create or replace PROCEDURE DeleteInventoryAndWarehouseID(
    p_WarehouseID NUMBER
)
IS
    CURSOR inventory_cursor IS
        SELECT InventoryID
        FROM Inventory
        WHERE WarehouseID = p_WarehouseID;

    v_InventoryID NUMBER;
BEGIN
    FOR inventory_rec IN inventory_cursor
    LOOP
        v_InventoryID := inventory_rec.InventoryID;

        DELETE FROM Inventory
        WHERE InventoryID = v_InventoryID;

    END LOOP;

    DELETE FROM Warehouses
    WHERE WarehouseID = p_WarehouseID;

    COMMIT;
END;

--Implicit Cursor
create or replace PROCEDURE DeleteOrderByOrderNumber (
    p_OrderNumber NUMBER
) IS
    v_OrderID NUMBER;

BEGIN
    SELECT OrderID INTO v_OrderID FROM Orders WHERE OrderNumber = p_OrderNumber;

    -- Cursor
    FOR shipment IN (SELECT ShipmentID FROM Shipments WHERE OrderID = v_OrderID) LOOP
        DELETE FROM Shipments WHERE ShipmentID = shipment.ShipmentID;
    END LOOP;

    DELETE FROM Payments WHERE OrderNumber = p_OrderNumber;

    DELETE FROM Transactions WHERE OrderNumber = p_OrderNumber;

    DELETE FROM OrderItems WHERE OrderNumber = p_OrderNumber;

    DELETE FROM Orders WHERE OrderNumber = p_OrderNumber;

    DELETE FROM Cash WHERE OrderNumber = p_OrderNumber;

    DELETE FROM BankCard WHERE OrderNumber = p_OrderNumber;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);
END DeleteOrderByOrderNumber;

create or replace PROCEDURE DeleteUser (
    p_UserID NUMBER,
    p_IsDeleted OUT BOOLEAN
)
AS
BEGIN
    BEGIN
        DELETE FROM Users
        WHERE UserID = p_UserID;

        COMMIT;
        p_IsDeleted := TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            p_IsDeleted := FALSE;
    END;
END DeleteUser;

create or replace PROCEDURE InsertOrUpdateBinaryContent(
    p_ContentID NUMBER,
    p_FileName VARCHAR2,
    p_FileType VARCHAR2,
    p_FileExtension VARCHAR2,
    p_Content BLOB,
    p_Cursor OUT SYS_REFCURSOR
)
IS
    v_ContentID_exists NUMBER;
BEGIN
    BEGIN
        SELECT ContentID INTO v_ContentID_exists
        FROM BinaryContent
        WHERE ContentID = p_ContentID;

        UPDATE BinaryContent
        SET
            FileName = p_FileName,
            FileType = p_FileType,
            FileExtension = p_FileExtension,
            Content = p_Content
        WHERE ContentID = p_ContentID;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            INSERT INTO BinaryContent (ContentID, FileName, FileType, FileExtension, Content)
            VALUES (p_ContentID, p_FileName, p_FileType, p_FileExtension, p_Content);
    END;

    OPEN p_Cursor FOR
        SELECT *
        FROM BinaryContent WHERE ContentID = p_ContentID;
END;

create or replace PROCEDURE SignIn(
    p_UserName IN VARCHAR2,
    p_PasswordHash IN VARCHAR2,
    p_UserData OUT SYS_REFCURSOR,
    p_ContentData OUT SYS_REFCURSOR
) IS
    v_UserID NUMBER;
BEGIN
    -- Проверяем, существует ли пользователь с введенным именем и паролем
    SELECT UserID INTO v_UserID
    FROM Users
    WHERE UserName = p_UserName AND PasswordHash = p_PasswordHash;

    -- Если пользователь существует, возвращаем данные о пользователе и контенте
    IF v_UserID IS NOT NULL THEN
        OPEN p_UserData FOR
            SELECT * FROM Users WHERE UserID = v_UserID;

        DECLARE
            v_ContentID NUMBER;
        BEGIN
            SELECT ContentID INTO v_ContentID
            FROM Users
            WHERE UserID = v_UserID;

            IF v_ContentID IS NOT NULL THEN
                OPEN p_ContentData FOR
                    SELECT * FROM BinaryContent WHERE ContentID = v_ContentID;
            END IF;
        END;
    END IF;
END;

create or replace PROCEDURE SignUp(
    p_UserID OUT NUMBER,
    p_CreatingDate OUT DATE,
    p_UserName VARCHAR2,
    p_PasswordHash VARCHAR2,
    p_Email VARCHAR2,
    p_ContentID NUMBER,
    p_UserRole VARCHAR2,
    p_BirthDate DATE,
    p_PhoneNumber VARCHAR2
) IS
    v_UserCount NUMBER;
BEGIN
    -- Перевіряємо, чи існує користувач з введеним ім'ям
    SELECT COUNT(*) INTO v_UserCount
    FROM Users
    WHERE UserName = p_UserName;

    IF v_UserCount = 0 THEN
        -- Використовуємо секвенцію для отримання нового UserID
        SELECT UsersSeq.NEXTVAL INTO p_UserID FROM DUAL;
        p_CreatingDate := SYSTIMESTAMP;
        -- Додаємо нового користувача в таблицю Users
        INSERT INTO Users (UserID, UserName, PasswordHash, Email, ContentID,  UserRole, BirthDate, PhoneNumber, CreatingDate)
        VALUES (p_UserID, p_UserName, p_PasswordHash, p_Email, p_ContentID, p_UserRole, p_BirthDate, p_PhoneNumber, p_CreatingDate);
    END IF;
END;

create or replace PROCEDURE UpdateCategory(
    p_CategoryID NUMBER,
    p_CategoryName VARCHAR2,
    p_CategoryDescription VARCHAR2,
    p_ParentCategoryID NUMBER
) AS
BEGIN
    UPDATE Categories
    SET
        CategoryName = p_CategoryName,
        CategoryDescription = p_CategoryDescription,
        ParentCategoryID = p_ParentCategoryID
    WHERE CategoryID = p_CategoryID;
END;

create or replace PROCEDURE UpdateDescription(
    p_DescriptionID NUMBER,
    p_FileName VARCHAR2,
    p_FileType VARCHAR2,
    p_FileExtension VARCHAR2,
    p_Info VARCHAR2
) AS
BEGIN
    UPDATE Descriptions
    SET
        FileName = p_FileName,
        FileType = p_FileType,
        FileExtension = p_FileExtension,
        Info = p_Info
    WHERE DescriptionID = p_DescriptionID;
END;

create or replace PROCEDURE UpdateInventory (
    p_InventoryID NUMBER,
    p_ProductID VARCHAR2,
    p_QuantityOnHand NUMBER,
    p_WarehouseID NUMBER
)
AS
BEGIN
    UPDATE Inventory
    SET ProductID = p_ProductID,
        QuantityOnHand = p_QuantityOnHand,
        WarehouseID = p_WarehouseID
    WHERE InventoryID = p_InventoryID;
    COMMIT;
END UpdateInventory;

create or replace PROCEDURE UpdateProduct (
    p_ProductID NUMBER,
    p_ProductName VARCHAR2,
    p_DescriptionID NUMBER,
    p_ContentID NUMBER,
    p_Cost NUMBER,
    p_CategoryID NUMBER
)
AS
BEGIN
    UPDATE Products
    SET
        ProductName = p_ProductName,
        DescriptionID = p_DescriptionID,
        ContentID = p_ContentID,
        Cost = p_Cost,
        CategoryID = p_CategoryID
    WHERE ProductID = p_ProductID;

    COMMIT;
END UpdateProduct;


create or replace PROCEDURE UpdateShipmentStatus (
    p_ShipmentID NUMBER,
    p_ShipmentStatus VARCHAR2
) IS
BEGIN
    UPDATE Shipments
    SET ShipmentStatus = p_ShipmentStatus
    WHERE ShipmentID = p_ShipmentID;
END;

create or replace PROCEDURE UpdateSupplier (
    p_SupplierID NUMBER,
    p_CompanyName VARCHAR2,
    p_ContactInfo VARCHAR2,
    p_SupplierAddress VARCHAR2
)
AS
BEGIN
    UPDATE Suppliers
    SET CompanyName = p_CompanyName,
        ContactInfo = p_ContactInfo,
        SupplierAddress = p_SupplierAddress
    WHERE SupplierID = p_SupplierID;
    COMMIT;
END UpdateSupplier;


create or replace PROCEDURE UpdateUserData(
    p_UserID NUMBER,
    p_UserName VARCHAR2,
    p_Email VARCHAR2,
    p_BirthDate DATE,
    p_PhoneNumber VARCHAR2,
    p_Cursor OUT SYS_REFCURSOR
) IS
    v_UserCount NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_UserCount
    FROM Users
    WHERE UserID = p_UserID;

    IF v_UserCount != 0 THEN
        UPDATE Users
        SET
            UserName = p_UserName,
            Email = p_Email,
            BirthDate = p_BirthDate,
            PhoneNumber = p_PhoneNumber
        WHERE UserID = p_UserID;

        OPEN p_Cursor FOR
            SELECT *
            FROM Users WHERE UserID = p_UserID;

    END IF;
END;

create or replace PROCEDURE UpdateUserRole(
    p_UserID NUMBER,
    p_NewUserRole VARCHAR2
)
AS
BEGIN
    UPDATE Users
    SET UserRole = p_NewUserRole
    WHERE UserID = p_UserID;

    COMMIT;
END UpdateUserRole;


create or replace PROCEDURE UpdateWarehouse(
    p_WarehouseID NUMBER,
    p_WarehouseName VARCHAR2,
    p_Location VARCHAR2,
    p_Capacity NUMBER,
    p_Availability NUMBER
) AS
BEGIN
    UPDATE Warehouses
    SET
        WarehouseName = p_WarehouseName,
        Location = p_Location,
        Capacity = p_Capacity,
        Availability = p_Availability
    WHERE WarehouseID = p_WarehouseID;
END;