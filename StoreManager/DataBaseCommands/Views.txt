
  CREATE OR REPLACE VIEW AUDITLOGSVIEWVIEW AS 
  SELECT
    ACTIONTYPE,
    ACTIONDATETIME,
    ACTIONDETAILS
FROM
    AuditLogs;

  
  CREATE OR REPLACE VIEW CATEGORIESVIEW AS
  SELECT CATEGORYID,CATEGORYNAME, CATEGORYDESCRIPTION,PARENTCATEGORYID
FROM Categories;


  CREATE OR REPLACE VIEW CATEGORYHIERARCHYVIEW AS 
  SELECT 
    CategoryID, 
    ParentCategoryID,
    CategoryName, 
    CategoryDescription, 
    CONNECT_BY_ROOT CategoryID AS RootCategoryID,
    LEVEL AS CategoryLevel
FROM Categories
START WITH ParentCategoryID IS NULL
CONNECT BY PRIOR CategoryID = ParentCategoryID;


  CREATE OR REPLACE VIEW DELETEPRODUCTVIEW AS 
  SELECT
    ProductID,
    ProductName
FROM
    Products;


    
  CREATE OR REPLACE VIEW DESCRIPTIONVIEW AS 
  SELECT
    D.FileName,
    D.FileType,
    D.FileExtension,
    D.UploadDate,
    D.ModificationDate,
    D.Info,
    COUNT(P.DescriptionID) AS UsageCount
FROM
    Descriptions D
LEFT JOIN
    Products P ON D.DescriptionID = P.DescriptionID
GROUP BY
    D.FileName,
    D.FileType,
    D.FileExtension,
    D.UploadDate,
    D.ModificationDate,
    D.Info;


    
  CREATE OR REPLACE VIEW INVENTORYPRODUCTSVIEW AS 
  SELECT
    ProductID,
    ProductName
FROM
    Products;

    
  CREATE OR REPLACE VIEW INVENTORYUPDATEVIEW AS 
  SELECT
    I.InventoryID,
    I.ProductID,
    I.QuantityOnHand,
    I.WarehouseID,
    I.InventoryDate,
    P.ProductName,
    W.WarehouseName
FROM
    Inventory I
    JOIN Products P ON I.ProductID = P.ProductID
    JOIN Warehouses W ON I.WarehouseID = W.WarehouseID;


    
  CREATE OR REPLACE VIEW INVENTORYVIEW AS 
  SELECT
    P.ProductName,
    C.CategoryName,
    W.WarehouseName,
    I.QuantityOnHand,
    I.WarehouseID,
    I.InventoryDate
FROM
    Inventory I
    LEFT JOIN Products P ON I.ProductID = P.ProductID
    LEFT JOIN Warehouses W ON I.WarehouseID = W.WarehouseID
    LEFT JOIN Categories C ON P.CategoryID = C.CategoryID;


    
  CREATE OR REPLACE VIEW INVENTORYWAREHOUSESVIEW AS 
  SELECT
    WarehouseID,
    WarehouseName
FROM
    Warehouses;

    
  CREATE OR REPLACE VIEW ORDERDETAILSVIEW AS 
  SELECT
    O.OrderNumber,
    O.OrderDate,
    O.OrderStatus,
    U.UserName,
    C.CashID,
    BC.BankCardID,
    BC.BankNumber
FROM
    Orders O
LEFT JOIN
    Users U ON O.UserID = U.UserID
LEFT JOIN
    Cash C ON O.OrderNumber = C.OrderNumber
LEFT JOIN
    BankCard BC ON O.OrderNumber = BC.OrderNumber;


    
  CREATE OR REPLACE VIEW PRODUCTCATEGORYDESCRIPTIONSVIEW AS 
  SELECT
    P.ProductID,
    P.SKU,
    P.ProductName,
    P.Cost,
    P.SalesCount,
    C.CategoryID,
    C.CategoryName,
    C.CategoryDescription,
    D.DescriptionID,
    D.FileName AS FileDescriptionName,
    D.FileType AS FileDescriptionFileType,
    D.FileExtension AS FileDescriptionFileExtension,
    D.FileData,
    D.UploadDate AS FileDescriptionUploadDate,
    D.ModificationDate AS FileDescriptionModificationDate,
    D.Info,
    BC.ContentID,
    BC.FileName AS FileBinaryContentName,
    BC.FileType AS FileBinaryContentFileType,
    BC.FileExtension AS FileBinaryContentFileExtension,
    BC.UploadDate AS FileBinaryContentUploadDate,
    BC.ModificationDate AS FileBinaryContentModificationDate,
    BC.Content
FROM
    Products P
JOIN
    Categories C ON P.CategoryID = C.CategoryID
JOIN
    Descriptions D ON P.DescriptionID = D.DescriptionID
JOIN
    BinaryContent BC ON BC.ContentID = p.ContentID;

    
  CREATE OR REPLACE VIEW PRODUCTSCATEGORIESVIEW AS 
  SELECT 
    CategoryID,
    CategoryName
FROM
    Categories;

    
  CREATE OR REPLACE VIEW PRODUCTSVIEW AS 
  SELECT
    P.ProductName,
    P.SKU,
    P.Cost,
    D.FileName AS DescriptionFileName,
    D.UploadDate AS DescriptionUploadDate,
    D.ModificationDate AS DescriptionModificationDate,
    BC.FileName AS ContentFileName,
    BC.UploadDate AS ContentUploadDate,
    BC.ModificationDate AS ContentModificationDate,
    PC.CategoryName AS ParentCategoryName,
    PC.CategoryDescription AS ParentCategoryDescription,
    P.SalesCount
FROM
    Products P
LEFT JOIN
    Descriptions D ON P.DescriptionID = D.DescriptionID
LEFT JOIN
    BinaryContent BC ON P.ContentID = BC.ContentID
LEFT JOIN
    Categories PC ON P.CategoryID = PC.CategoryID;

    
  CREATE OR REPLACE VIEW SHIPMENTSORDERSVIEW AS 
  SELECT
    OrderID,
    OrderNumber,
    OrderStatus
FROM
    Orders;

    
  CREATE OR REPLACE  VIEW UPDATEDESCRIPTIONVIEW AS 
  SELECT DescriptionID, FileName
FROM Descriptions;


  CREATE OR REPLACE VIEW UPDATEPRODUCTSVIEW AS 
  SELECT
    P.ProductID,
    P.ProductName,
    P.DescriptionID,
    D.FileName AS DescriptionFileName,
    P.ContentID,
    BC.FileName AS ContentFileName,
    P.Cost,
    P.CategoryID,
    PC.CategoryName AS ParentCategoryName,
    P.SalesCount
FROM
    Products P
LEFT JOIN
    Descriptions D ON P.DescriptionID = D.DescriptionID
LEFT JOIN
    BinaryContent BC ON P.ContentID = BC.ContentID
LEFT JOIN
    Categories PC ON P.CategoryID = PC.CategoryID;

    
  CREATE OR REPLACE  VIEW UPDATESUPPLIERSVIEW AS 
  SELECT SUPPLIERID,COMPANYNAME,CONTACTINFO,SUPPLIERADDRESS
FROM Suppliers;


  CREATE OR REPLACE  VIEW UPDATEUSERVIEW AS 
  SELECT UserID, UserName, UserRole
FROM Users;


  CREATE OR REPLACE VIEW UPDATEWAREHOUSESVIEW AS 
  SELECT WAREHOUSEID,WAREHOUSENAME,LOCATION,CAPACITY,AVAILABILITY
FROM Warehouses;




  CREATE OR REPLACE VIEW USERSVIEW AS 
  SELECT
    U.UserName,
    U.Email,
    BC.FileName,
    U.UserRole,
    U.OrderCount,
    U.BirthDate,
    U.PhoneNumber,
    U.CreatingDate
FROM
    Users U
JOIN
    BinaryContent BC ON U.ContentID = BC.ContentID;

    
  CREATE OR REPLACE VIEW VIEWSUPPLIERS AS 
  SELECT CompanyName,
    ContactInfo,
    SupplierAddress
FROM Suppliers;


  CREATE OR REPLACE VIEW VIEWSUPPLIERSVIEW AS 
  SELECT SUPPLIERID,COMPANYNAME,CONTACTINFO,SUPPLIERADDRESS
FROM Suppliers;

CREATE VIEW InventoryProductsView AS
SELECT
    ProductID,
    ProductName
FROM
    Products;

    CREATE VIEW InventoryWarehousesView AS
SELECT
    WarehouseID,
    WarehouseName
FROM
    Warehouses;

    
  CREATE OR REPLACE  VIEW  WAREHOUSEINVENTORYVIEW AS 
  SELECT
    W.WarehouseName,
    W.Location,
    W.Capacity,
    W.Availability,
    COUNT(I.InventoryID) AS InventoryCount
FROM
    Warehouses W
LEFT JOIN
    Inventory I ON W.WarehouseID = I.WarehouseID
GROUP BY
    W.WarehouseID, W.WarehouseName, W.Location, W.Capacity, W.Availability;

